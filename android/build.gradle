def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

buildscript {
    def kotlin_version = rootProject.ext.has('kotlinVersion') ? rootProject.ext.get('kotlinVersion') : '2.0.21'

    if (project == rootProject) {
        repositories {
            google()
            mavenCentral()
        }
        dependencies {
            classpath("com.android.tools.build:gradle:8.7.2")
            classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}")
        }
    }
}

def supportsNamespace() {
    def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
    def major = parsed[0].toInteger()
    def minor = parsed[1].toInteger()
    return (major > 7 || (major == 7 && minor >= 3))
}

def isNewArchitectureEnabled() {
    return project.hasProperty("newArchEnabled") && (project.newArchEnabled == "true" || project.newArchEnabled == true)
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
if (isNewArchitectureEnabled()) {
    apply plugin: 'com.facebook.react'
}

android {
    if (supportsNamespace()) {
        namespace "com.rnmaps.maps"
    }

    if (rootProject.hasProperty("ndkPath")) {
        ndkPath rootProject.ext.ndkPath
    }
    if (rootProject.hasProperty("ndkVersion")) {
        ndkVersion rootProject.ext.ndkVersion
    }

    compileSdk safeExtGet('compileSdkVersion', 35)

    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', 21)
        targetSdkVersion safeExtGet('targetSdkVersion', 34)

        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

        ndk {
            abiFilters(*reactNativeArchitectures())
        }
    }

    packagingOptions {
        excludes = [
            "META-INF",
            "META-INF/**",
            "**/libreact_render*.so",
        ]
    }

    buildFeatures {
        buildConfig = true
        prefab = true
    }
}

def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

repositories {
    mavenLocal()
    google()
    mavenCentral()

    // Needed for React Native dependencies
    maven {
        url("/home/ubuntu/workspace/react-native-maps/node_modules/react-native/packages/react-native/android")
    }
}

dependencies {
    // Use local project reference instead of versioned dependency
    implementation 'com.facebook.react:react-native:0.77.2'  // Do NOT use `project(':react-native')`


    implementation "com.google.android.gms:play-services-base:${safeExtGet('googlePlayServicesBaseVersion', '18.5.0')}"
    implementation "com.google.android.gms:play-services-maps:${safeExtGet('googlePlayServicesMapsVersion', '19.1.0')}"
    implementation "com.google.android.gms:play-services-location:${safeExtGet('googlePlayServicesLocationVersion', '21.3.0')}"
    implementation 'com.google.maps.android:android-maps-utils:3.10.0'
    implementation "androidx.work:work-runtime:2.9.1"
}

project.afterEvaluate {
    println("\u001B[32m[react-native-maps] Thank you for using react-native-maps ❤️! \n[react-native-maps] to help keep it maintained, please consider sponsoring at https://github.com/sponsors/salah-ghanim\u001B[0m")
}
